%The script performs PCA on a small dataset first and in the part2, it will
%work on the faces dataset. 

%loading the dataset
X= load('pcadata.mat');

X= X(1).X;
A= X(:,1);
B= X(:,2);

%Plotting the points on the figure 

plot(A, B, 'o', 'color', 'b');
hold on
axis([0 7 2 8])

%Calling the subtractMean function to subtract from each column
[Xmu,mu]= subtractMean (X);

%Calls the function myPCA to calculate & sort the eigen vector in
%descending order of the eigen values

[U, S] = myPCA(Xmu);

top= U(:,1);
fprintf('Top eigenvector is:\n')
disp(top)

%following commands will now plot the top & the second most eigen vector on
%to the previous graph

 line([0 U(1,1)] + mu(1,1), [0 U(2,1)] + mu(1,2), 'color', 'red'); hold on;
 line([0 U(1,2)] + mu(1,1), [0 U(2,2)] + mu(1,2), 'color', 'green'); hold on;

%This function calls to project the data point onto the eigen vector &
%stores value in Z

Z = projectData(Xmu, U, 1);

pz = Z(1:3, :);
disp(pz) %displays top 3 values of our projection

%This function stores recovered points in Xrec and then plot the line
Xrec = recoverData(Z, U, 1, mu); 

figure;
plot(A, B, 'o', 'color', 'b');
hold on
axis([0 7 2 8])

plot(Xrec(:,1), Xrec(:,2), '*', 'color', 'r')
hold on

%Part 2

%loads the face dataset in X1 & displays the 100 images

X1 = load('pcafaces.mat'); 
X1= X1(1).X;
figure;
displayData(X1(1:100, :))

%Same procedure as part 1: subtracting mean, eigen vectors, projecting and
%recovering the data.

[XMU, MU]= subtractMean(X1);
 
[Vec, Val]= myPCA(XMU);
 
Z1 = projectData(XMU, Vec, 200);
 
recover = recoverData(Z1, Vec, 200, MU);

%Displays the original faces and the recovered faces 

figure;
subplot(1,2,1);
displayData(X1(1:100,:));
title('Original faces');

subplot(1,2,2);
displayData(recover(1:100,:));
title('Recovered faces');
